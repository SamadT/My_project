//
// @functions
//

@function em-calc($values, $base-value: $rem-base) {
	$remValues: rem-calc($values, $base-value: $rem-base);
	
	$max: length($remValues);
	
	@if $max == 1 { @return strip-unit(nth($remValues, 1)) * 1em; }
	
	$emValues: ();
	@for $i from 1 through $max {
		$emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
	}
	@return $emValues;
}

/// Set z-index parameters
/// @author Ruslan Rastehaiev
///
/// @access public
///
/// @param {number} $key

/// @example scss - Usage
///   .foo {
///		z-index: z(100)
///   }
/// @return {number}

@function z($key) {
	@if map-has-key($z-layers, $key) {
		@return map-get($z-layers, $key);
	}

	@warn "Unknown `#{$key}` in $z-layers.";
	@return null;
}

// CONVERT TO REM
@function rem($pixels) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}
	@return $pixels / $rem-base * 1rem;
}



/// Set smooth scaling parameters
///
/// @author Ruslan Rastehaiev
///
/// @access public
///
/// @param {number} $minVal -
/// @param {number} $maxFontSize -
/// @param {number} $minWidth -
/// @param {number} $maxWidth -
///
/// @example scss - Usage
///   .foo {
///		font-size: scaling(20px, 40px, 320px, 1440px)
///   }
///
/// @return {string} value in 'em'

@function scaling($minVal, $maxVal, $minWidth, $maxWidth) {
	// y = mx + b
	$m: ($maxVal - $minVal) / ($maxWidth - $minWidth);

	// b = y1 - m‬ × x1
	$b: $minVal - $m * $minWidth;
	$b: rem($b);

	$m: $m * 100 + 'vw';

	@return calc(#{$m} + #{$b});
}